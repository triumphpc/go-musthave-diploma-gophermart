// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/triumphpc/go-musthave-diploma-gophermart/internal/app/models/order"
	"github.com/triumphpc/go-musthave-diploma-gophermart/internal/app/pg"

	user "github.com/triumphpc/go-musthave-diploma-gophermart/internal/app/models/user"
)

// MockStorage is an autogenerated mock type for the MockStorage type
type MockStorage struct {
	mock.Mock
	storage    map[string]user.User
	tokens     map[string]string
	orders     map[int]int
	ordercodes map[int]int
	userpoints map[int]int
}

// Auth provides a mock function with given fields: u
func (_m *MockStorage) HasAuth(u user.User) bool {
	if _m.storage == nil {
		_m.storage = make(map[string]user.User)
	}

	if _, ok := _m.storage[u.Login]; ok {
		return true
	}
	return false
}

// Register provides a mock function with given fields: u
func (_m *MockStorage) Register(u user.User) error {
	if _m.storage == nil {
		_m.storage = make(map[string]user.User)
	}

	if _, ok := _m.storage[u.Login]; ok {
		return pg.ErrLoginAlreadyExist
	}
	_m.storage[u.Login] = u

	return nil
}

// SetToken provides a mock function with given fields: u
func (_m *MockStorage) SetToken(u user.User, t string) error {
	if _m.tokens == nil {
		_m.tokens = make(map[string]string)
	}
	_m.tokens[u.Login] = t

	return nil
}

// UserByToken without logic
func (_m *MockStorage) UserByToken(t string) (int, error) {
	return 0, nil
}

// PutOrder put order in process for check status
func (_m *MockStorage) PutOrder(id int, c int) error {
	if _m.orders == nil {
		_m.orders = make(map[int]int)
	}
	for _, v := range _m.orders {
		if v == c {
			return pg.ErrOrderAlreadyExist
		}
	}
	_m.orders[id] = c

	return nil
}

// HasOrder check order in mock storage
func (_m *MockStorage) HasOrder(userID int, code int) bool {
	if _m.orders == nil {
		_m.orders = make(map[int]int)
	}
	for k, v := range _m.orders {
		if v == code && k == userID {
			return true
		}
	}

	return false
}

// SetStatus update status for order
func (_m *MockStorage) SetStatus(orderCode int, status int) error {
	if _m.ordercodes == nil {
		_m.ordercodes = make(map[int]int)
	}
	_m.ordercodes[orderCode] = status
	return nil
}

// AddPoints add points to user
func (_m *MockStorage) AddPoints(userID int, points int, orderCode int) error {
	_m.SetStatus(orderCode, order.PROCESSED)
	_m.userpoints[userID] += points

	return nil
}
