// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/triumphpc/go-musthave-diploma-gophermart/internal/app/models"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// ActiveWithdrawals provides a mock function with given fields: ctx
func (_m *Storage) ActiveWithdrawals(ctx context.Context) ([]models.Withdraw, error) {
	ret := _m.Called(ctx)

	var r0 []models.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context) []models.Withdraw); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPoints provides a mock function with given fields: ctx, userID, points, orderCode
func (_m *Storage) AddPoints(ctx context.Context, userID int, points int, orderCode int) error {
	ret := _m.Called(ctx, userID, points, orderCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, userID, points, orderCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddWithdraw provides a mock function with given fields: ctx, ord, points
func (_m *Storage) AddWithdraw(ctx context.Context, ord models.Order, points float64) error {
	ret := _m.Called(ctx, ord, points)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order, float64) error); ok {
		r0 = rf(ctx, ord, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() {
	_m.Called()
}

// HasAuth provides a mock function with given fields: ctx, user
func (_m *Storage) HasAuth(ctx context.Context, user models.User) (bool, error) {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, models.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderByCode provides a mock function with given fields: ctx, code
func (_m *Storage) OrderByCode(ctx context.Context, code int) (models.Order, error) {
	ret := _m.Called(ctx, code)

	var r0 models.Order
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Order); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Orders provides a mock function with given fields: ctx, userID
func (_m *Storage) Orders(ctx context.Context, userID int) ([]models.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersForCheck provides a mock function with given fields: ctx
func (_m *Storage) OrdersForCheck(ctx context.Context) ([]models.Order, error) {
	ret := _m.Called(ctx)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(context.Context) []models.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrder provides a mock function with given fields: ctx, ord
func (_m *Storage) PutOrder(ctx context.Context, ord models.Order) error {
	ret := _m.Called(ctx, ord)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, ord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, user
func (_m *Storage) Register(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatus provides a mock function with given fields: ctx, orderCode, status, timeout, points
func (_m *Storage) SetStatus(ctx context.Context, orderCode int, status int, timeout int, points int) error {
	ret := _m.Called(ctx, orderCode, status, timeout, points)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int) error); ok {
		r0 = rf(ctx, orderCode, status, timeout, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: ctx, user, token
func (_m *Storage) SetToken(ctx context.Context, user models.User, token string) error {
	ret := _m.Called(ctx, user, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User, string) error); ok {
		r0 = rf(ctx, user, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserByToken provides a mock function with given fields: ctx, token
func (_m *Storage) UserByToken(ctx context.Context, token string) (models.User, error) {
	ret := _m.Called(ctx, token)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdraw provides a mock function with given fields: ctx, ord, points
func (_m *Storage) Withdraw(ctx context.Context, ord models.Order, points float64) error {
	ret := _m.Called(ctx, ord, points)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order, float64) error); ok {
		r0 = rf(ctx, ord, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawsByUserID provides a mock function with given fields: ctx, userID
func (_m *Storage) WithdrawsByUserID(ctx context.Context, userID int) ([]models.Withdraw, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Withdraw); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
